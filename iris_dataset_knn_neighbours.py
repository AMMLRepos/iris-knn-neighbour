# -*- coding: utf-8 -*-
"""IRIS Dataset - KNN Neighbours

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kLZKLEegOQQQ1xkwsAljAIF611VhYvCR

#Objective
To predict the species of a flower based on the legnth of its sepals and petals which somebody from botany can only understand. 

#Target 
A begginer friendly notebook for machine learning begginers. iris dataset is also called as the hello world of Machine learning 

#Steps
Following are the high-level steps we will perform - 
- Import required libraries - pandas, numpy, matplotlib, sklearn, etc.
- Download dataset into local environment 
- Perform basic inspection on the content of the dataset 
- Separate Train, test and validation dataset
- Train the model using sklearn
- Perform predictions 
- Test score

#Step 1 - Import required libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Step 2 - Load dataset from sklearn datasets """

from sklearn.datasets import load_iris
iris_dataset = load_iris()
print("Type of dataset -", type(iris_dataset))

"""# Step 3 - See what all content is available in the dataset 
As you can see we have -
- data - This is the code data available in the dataset
- target - This is the target value which is available in the dataset
- target_names - Names of the species 
- DESCR - description of the dataset
- feature_names - names of the features or columns which will have data to train the model and predict outcome 
- filename - Local file location where this dataset file is stored 
"""

print(iris_dataset)

print("Keys of iris_dataset: \n{}".format(iris_dataset.keys()))

"""Lets just print the description provided in the dataset with key 'DESCR'"""

print(iris_dataset['DESCR'] + "\n")

"""Let us now see the target names we have. These are the names of species we need to predict using our model"""

print("Target names: {}".format(iris_dataset['target_names']))

"""Let us now print the features we have in our dataset which is stored in features_names key. We have 4 features - sepal lenght, sepal width, petal lenght, petal width """

print("Feature names: \n{}".format(iris_dataset['feature_names']))

"""Let us now print the data we have which is a numpy array having multiple rows and 4 columns"""

#print the type of data we have
print("Type of data: {}".format(type(iris_dataset['data'])))
print("")

#print the shape of the array 
print("Shape of data: {}".format(iris_dataset['data'].shape))
print("")

#print top 5 records from the data
print("First five columns of data:\n\n{}".format(iris_dataset['data'][:5]))

"""Let us now see our target data which is again a numpy array with 150 rows and 1 column"""

print("Type of target: {}".format(type(iris_dataset['target'])))
print("Shape of target: {}".format(iris_dataset['target'].shape))

#Print the data we have in our target 
print("Target:\n{}".format(iris_dataset['target']))

"""#Step 4 - Separate train and test data
We need to do this to ensure that we have enough data to test our model as many a times you might not have data ready to test your model and you should not test it with your trained data as machine has already seen it and it will just reply based on its learning on the train data

For split, we have train_test_split from sklearn which will seperate your dataset in 80/20 ratio
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(iris_dataset["data"], iris_dataset["target"], random_state = 0)

print("X_train shape: {}".format(X_train.shape))
print("y_train shape: {}".format(y_train.shape))

print("X_test shape: {}".format(X_test.shape))
print("y_test shape: {}".format(y_test.shape))

"""Now that we have train and test data, let us do some basic visualization to see how does each feature relate with the other and for that, we will do -
- convert our dataset which is more of a numpy array into a Dataframe using pandas
- use seaborn to draw a scatter plot and a pairplot
"""

iris_dataframe = pd.DataFrame(X_train, columns = iris_dataset.feature_names)
print(iris_dataframe)

"""Let us draw the pairplot which is a plot comparing all features to each other and gives a consolidated visualization"""

sns.pairplot(data = iris_dataframe);

"""In the graph above we can see a few linear relationships (petal length and petal width), (sepal length and petal width), etc. But a line cannot be placed (yes we can do but that reallly does not fit to predict us with accuracy) and so we cannot just use Linear Regression. Instead we need to use [KNN neighbours](https://towardsdatascience.com/machine-learning-basics-with-the-k-nearest-neighbors-algorithm-6a6e71d01761)

#Step 5 - Let us train our model using sklearn KNN Algo
"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 1)

knn.fit(X_train, y_train)

"""Let us define X_new which has sample inputs for 4 features we want to use for prediction."""

X_new = np.array([[5,2.9,1,0.2]])
print("X_new.shape :{}".format(X_new.shape))

"""Let us predict and see what we get"""

prediction = knn.predict(X_new)
print("Prediction : {} ".format(prediction))
print("Predicted target name: {}".format(iris_dataset['target_names'][prediction]))

"""Let us predict outcomes for all values which are there in our X_test array"""

y_pred = knn.predict(X_test)
print("Test set predictions - ", y_pred)

"""Check the test score using np.mean function"""

print("Test set score - ", np.mean(y_pred == y_test))

"""Check the test score using score method of sklearn"""

score = knn.score(X_test, y_test)
print("Test set score -", score)